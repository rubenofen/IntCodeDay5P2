{"version":3,"sources":["input.js","components/Table/Table.js","components/Table/index.js","StatusMachine/IntCode.js","useInput.js","App.js","serviceWorker.js","index.js"],"names":["defInput","Cell","value","className","status","Row","input","index","map","key","ThThead","rowElements","ths","i","push","Table","current","slice","statuses","read","array","mode","write","position","part1","table","concat","returnObject","op","output","current_pointer","length","substring","split","reverse","join","getOpCodeAndMode","toString","modes","operand1","operand2","calculate","jumpIfTrue","jumpIfFalse","lessThan","equals","useInput","initialState","useState","setInput","e","target","iniTable","data","parseInt","resetTable","Array","fill","App","defaultInput","rawInput","setRawInput","setTable","currentPointer","setCurrentPointer","setOutput","setOp","auto","setAuto","speed","setSpeed","tiemoutId","setTiemoutId","executeStep","newStatus","newOputput","useEffect","setTimeout","onClick","disabled","type","onChange","checked","clearTimeout","rows","cols","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.dd4525fa.chunk.js","sourcesContent":["const defInput = \"3,225,1,225,6,6,1100,1,238,225,104,0,1101,69,55,225,1001,144,76,224,101,-139,224,224,4,224,1002,223,8,223,1001,224,3,224,1,223,224,223,1102,60,49,225,1102,51,78,225,1101,82,33,224,1001,224,-115,224,4,224,1002,223,8,223,1001,224,3,224,1,224,223,223,1102,69,5,225,2,39,13,224,1001,224,-4140,224,4,224,102,8,223,223,101,2,224,224,1,224,223,223,101,42,44,224,101,-120,224,224,4,224,102,8,223,223,101,3,224,224,1,223,224,223,1102,68,49,224,101,-3332,224,224,4,224,1002,223,8,223,1001,224,4,224,1,224,223,223,1101,50,27,225,1102,5,63,225,1002,139,75,224,1001,224,-3750,224,4,224,1002,223,8,223,1001,224,3,224,1,223,224,223,102,79,213,224,1001,224,-2844,224,4,224,102,8,223,223,1001,224,4,224,1,223,224,223,1,217,69,224,1001,224,-95,224,4,224,102,8,223,223,1001,224,5,224,1,223,224,223,1102,36,37,225,1101,26,16,225,4,223,99,0,0,0,677,0,0,0,0,0,0,0,0,0,0,0,1105,0,99999,1105,227,247,1105,1,99999,1005,227,99999,1005,0,256,1105,1,99999,1106,227,99999,1106,0,265,1105,1,99999,1006,0,99999,1006,227,274,1105,1,99999,1105,1,280,1105,1,99999,1,225,225,225,1101,294,0,0,105,1,0,1105,1,99999,1106,0,300,1105,1,99999,1,225,225,225,1101,314,0,0,106,0,0,1105,1,99999,1107,677,677,224,102,2,223,223,1006,224,329,1001,223,1,223,1108,677,677,224,1002,223,2,223,1006,224,344,1001,223,1,223,107,226,226,224,1002,223,2,223,1006,224,359,101,1,223,223,1008,226,226,224,102,2,223,223,1005,224,374,1001,223,1,223,1107,226,677,224,1002,223,2,223,1006,224,389,1001,223,1,223,1008,677,226,224,1002,223,2,223,1005,224,404,1001,223,1,223,7,677,226,224,102,2,223,223,1005,224,419,1001,223,1,223,1008,677,677,224,1002,223,2,223,1006,224,434,1001,223,1,223,108,226,226,224,102,2,223,223,1006,224,449,1001,223,1,223,108,677,677,224,102,2,223,223,1006,224,464,1001,223,1,223,107,226,677,224,1002,223,2,223,1005,224,479,101,1,223,223,1108,226,677,224,1002,223,2,223,1006,224,494,1001,223,1,223,107,677,677,224,1002,223,2,223,1006,224,509,101,1,223,223,7,677,677,224,102,2,223,223,1006,224,524,1001,223,1,223,1007,226,677,224,1002,223,2,223,1005,224,539,1001,223,1,223,8,226,677,224,1002,223,2,223,1005,224,554,101,1,223,223,8,677,677,224,102,2,223,223,1005,224,569,101,1,223,223,7,226,677,224,102,2,223,223,1006,224,584,1001,223,1,223,1007,226,226,224,102,2,223,223,1006,224,599,1001,223,1,223,1107,677,226,224,1002,223,2,223,1006,224,614,1001,223,1,223,1108,677,226,224,1002,223,2,223,1005,224,629,1001,223,1,223,1007,677,677,224,102,2,223,223,1006,224,644,1001,223,1,223,108,226,677,224,102,2,223,223,1005,224,659,101,1,223,223,8,677,226,224,1002,223,2,223,1006,224,674,1001,223,1,223,4,223,99,226\";\r\n\r\nexport default defInput;","import React from \"react\";\r\nimport \"./Table.scss\";\r\n\r\nconst Cell = ({ value, className }) => (\r\n  <td className={`${className} ${value.status}`}>{value.value}</td>\r\n);\r\n\r\nconst Row = ({ input, index }) => {\r\n  return (\r\n    <tr>\r\n      <td className=\"left-th\">{index}</td>\r\n      {input.map((value, index) => (\r\n        <Cell\r\n          className={index % 10 === 9 ? \"bordered\" : \"\"}\r\n          key={index}\r\n          value={value}\r\n        />\r\n      ))}\r\n    </tr>\r\n  );\r\n};\r\n\r\nconst ThThead = ({rowElements}) => {\r\n    const ths = [];\r\n    for (let i = 0; i <= rowElements; i++) {\r\n        i?ths.push(<td className=\"left-th\" key={i}>{i-1}</td>):ths.push(<td className=\"left-th\" key={i}></td>)\r\n    }\r\n    return ths;\r\n}\r\n\r\nconst Table = ({ input, rowElements }) => {\r\n  return (\r\n    <table>\r\n      <tbody>\r\n        <tr>\r\n            <ThThead rowElements={rowElements}/>\r\n        </tr>\r\n        {input.map((current, index) => {\r\n          if (index % rowElements === 0) {\r\n            return (\r\n              <Row\r\n                key={index}\r\n                input={input.slice(index, index + rowElements)}\r\n                index={index}\r\n              />\r\n            );\r\n          }\r\n        })}\r\n      </tbody>\r\n    </table>\r\n  );\r\n};\r\n\r\nexport default Table;\r\n","import Table from './Table';\r\n\r\nexport default Table;","const statuses = {\r\n  current_pointer: \"current_pointer\",\r\n  read: \"read\",\r\n  read_pointer: \"read_pointer\",\r\n  write_pointer: \"write_pointer\",\r\n  write: \"write\"\r\n};\r\n\r\nconst getOpCodeAndMode = op => {\r\n  const opCode =\r\n    op.length === 1 ? 0 + op : op[op.length - 2] + op[op.length - 1];\r\n  const mode = op.substring(0, op.length - 2);\r\n  const result = [\r\n    opCode,\r\n    mode\r\n    .split(\"\")\r\n    .reverse()\r\n    .join(\"\")\r\n  ];\r\n  return result;\r\n};\r\n\r\n\r\nconst read = (array, mode, i) => {\r\n  if (typeof mode !== 'undefined' && mode !== '0') {\r\n    array[i].status = statuses.read;\r\n    return array[i].value;\r\n  } else {\r\n    array[i].status = statuses.read_pointer;\r\n    array[array[i].value].status = statuses.read;\r\n    return array[array[i].value].value;\r\n  }\r\n}\r\n\r\nconst write = (input, array, i) => {\r\n  const position = array[i].value;\r\n  if (!array[position]) array[position] = {};\r\n  array[position].value = input;\r\n  array[i].status = statuses.write_pointer;\r\n  array[position].status = statuses.write;\r\n  return i + 1;\r\n}\r\n\r\nconst calculate = (op, array, modes, i) => {\r\n  const operand1 = read(array, modes[0], i + 1);\r\n  const operand2 = read(array, modes[1], i + 2);\r\n  write(op === \"01\" ? operand1 + operand2 : operand1 * operand2, array, i + 3)\r\n  return i + 4;\r\n}\r\n\r\nconst jumpIfTrue = (array, modes, i) => read(array, modes[0], i + 1) ? read(array, modes[1], i + 2) : i + 3\r\nconst jumpIfFalse = (array, modes, i) => !read(array, modes[0], i + 1) ? read(array, modes[1], i + 2) : i + 3\r\n\r\nconst lessThan = (array, modes, i) => {\r\n  (read(array, modes[0], i + 1) < read(array, modes[1], i + 2)) ? write(1, array, i + 3): write(0, array, i + 3)\r\n  return i + 4;\r\n}\r\n\r\nconst equals = (array, modes, i) => {\r\n  (read(array, modes[0], i + 1) === read(array, modes[1], i + 2)) ? write(1, array, i + 3): write(0, array, i + 3)\r\n  return i + 4;\r\n}\r\n\r\nexport const part1 = (table, i) => {\r\n  const input = table.concat();\r\n  const returnObject = {\r\n    op: \"\",\r\n    output: \"\",\r\n    current_pointer: i,\r\n    table: []\r\n  };\r\n\r\n  const magicInput = 5;\r\n  const op = getOpCodeAndMode(input[i].value.toString());\r\n  input[i].status = statuses.current_pointer;\r\n  returnObject.op = input[i].value.toString();\r\n\r\n  if (op[0] === \"01\" || op[0] === \"02\") {\r\n    returnObject.current_pointer = calculate(op[0], input, op[1], i);\r\n  } else if (op[0] === \"03\") {\r\n    returnObject.current_pointer = write(magicInput, input, i += 1);\r\n  } else if (op[0] === \"04\") {\r\n    returnObject.output = read(input, op[1][0], i + 1);\r\n    returnObject.current_pointer = i + 2;\r\n  } else if (op[0] === \"05\") returnObject.current_pointer = jumpIfTrue(input, op[1], i)\r\n  else if (op[0] === \"06\") returnObject.current_pointer = jumpIfFalse(input, op[1], i)\r\n  else if (op[0] === \"07\") returnObject.current_pointer = lessThan(input, op[1], i)\r\n  else if (op[0] === \"08\") returnObject.current_pointer = equals(input, op[1], i)\r\n\r\n  returnObject.table = input;\r\n  return returnObject;\r\n};","import { useState } from \"react\";\r\n\r\nconst useInput = initialState => {\r\n  const [input, setInput] = useState(initialState);\r\n  const setState = e => {\r\n    setInput(e.target.value);\r\n  };\r\n  return [input, setState];\r\n};\r\n\r\nexport default useInput;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport defaultInput from \"./input\";\r\nimport Table from \"./components/Table\";\r\nimport { part1 } from \"./StatusMachine/IntCode\";\r\nimport useInput from \"./useInput\";\r\n\r\nconst iniTable = data =>\r\n  data.map(value => {\r\n    return { value: parseInt(value), status: \"\" };\r\n  });\r\n\r\nconst resetTable = data => {\r\n  const newArray = new Array(data.length).fill({ value: \"\", status: \"\" });\r\n  return newArray.map((value, index) =>\r\n    data[index] ? { value: data[index].value, status: \"\" } : value\r\n  );\r\n};\r\n\r\nfunction App() {\r\n  const [rawInput, setRawInput] = useState(defaultInput);\r\n  const [table, setTable] = useState(iniTable(rawInput.split(\",\")));\r\n  const [currentPointer, setCurrentPointer] = useState(0);\r\n  const [output, setOutput] = useState([]);\r\n  const [op, setOp] = useState(\"\");\r\n  const [auto, setAuto] = useState(false);\r\n  const [speed, setSpeed] = useInput(1000);\r\n  const [tiemoutId, setTiemoutId] = useState(\"\");\r\n\r\n  const executeStep = () => {\r\n    const newStatus = part1(resetTable(table), currentPointer);\r\n    const newOputput = output.concat([newStatus.output]);\r\n    setTable(newStatus.table);\r\n    setCurrentPointer(newStatus.current_pointer);\r\n    setOutput(newOputput);\r\n    setOp(newStatus.op);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (auto && op !== '99') {\r\n      setTiemoutId(setTimeout(executeStep, speed));\r\n    }\r\n  }, [currentPointer, auto, speed, op]);\r\n\r\n  const load = input => {\r\n    setTable(iniTable(input.target.value.split(\",\")));\r\n    setRawInput(input.target.value);\r\n  };\r\n\r\n  const checkAuto = input => {\r\n    setAuto(input.target.checked);\r\n    if (!input.target.checked) {\r\n      clearTimeout(tiemoutId);\r\n      setTiemoutId(\"\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Table input={table} rowElements={30} />\r\n      <button onClick={executeStep} disabled={op === \"99\"}>\r\n        Next step\r\n      </button>\r\n      OP: <span>{op}</span>\r\n      <br />\r\n      Auto: <input type=\"checkbox\" onChange={checkAuto} checked={auto} />\r\n      Speed: <input type=\"number\" value={speed} onChange={setSpeed} />\r\n      <br />\r\n      {output && output.map(value => <div>{value}</div>)}\r\n      INPUT:\r\n      <div>\r\n        <textarea rows=\"10\" cols=\"50\" onChange={load} value={rawInput} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}